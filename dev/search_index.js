var documenterSearchIndex = {"docs":
[{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"EditURL = \"../../../test/literate/pod.jl\"","category":"page"},{"location":"manual/pod/#Proper-orthogonal-decomposition-(POD)","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"","category":"section"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"In this example, we will demonstrate the use of proper orthogonal decomposition (POD) for decomposing a flow field into basis modes.","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"CurrentModule = ILMPostProcessing","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"using ILMPostProcessing\nusing Plots","category":"page"},{"location":"manual/pod/#Get-the-flow-field-data","page":"Proper orthogonal decomposition (POD)","title":"Get the flow field data","text":"","category":"section"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"First, we need some flow field data to analyze. For this purpose, we will use ViscousFlow.jl to get snapshots of the flow for a flat plate at 30 degrees angle of attack at Reynolds number 100.","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"using ViscousFlow\n\nmy_params = Dict()\nmy_params[\"Re\"] = 100\nmy_params[\"freestream speed\"] = 1.0 # in x-dir\nmy_params[\"freestream angle\"] = 0.0 # relative to horizontal\n\nxlim = (-1.0, 5.0)\nylim = (-2.0, 2.0)\nmy_params[\"grid Re\"] = 4.0\n\ng = setup_grid(xlim, ylim, my_params)\n\nΔs = surface_point_spacing(g, my_params)\nbody = Plate(1.0, Δs)\n\ncent = [0.5,0.0]\nα = -30π/180\nX = MotionTransform(cent, α)\njoint = Joint(X)\n\nm = RigidBodyMotion(joint, body)\nx = init_motion_state(body, m)\nupdate_body!(body, x, m)\nsys = viscousflow_system(g, body, phys_params = my_params, motions = m);\n\nu0 = init_sol(sys)\ntspan = (0.0, 20.0)\nintegrator = init(u0, tspan, sys)\n\n# Solve to 10 convective time units\nstep!(integrator, 10)","category":"page"},{"location":"manual/pod/#Assemble-snapshots-of-the-velocity-field-from-the-solution-data","page":"Proper orthogonal decomposition (POD)","title":"Assemble snapshots of the velocity field from the solution data","text":"","category":"section"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"Here, we make use of the capability of the velocity function to generate an array of velocity fields at a range of times. We will save every 5th time step in this array.","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"sol = integrator.sol\ntpod = sol.t[2:5:end]\nX = velocity(sol, sys, tpod);\nnothing #hide","category":"page"},{"location":"manual/pod/#Perform-the-POD","page":"Proper orthogonal decomposition (POD)","title":"Perform the POD","text":"","category":"section"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"The POD is simply performed with the PODModes function. This provides a structure containing the modes (phi), the expansion coefficients (a), and the modal energies (lambda). By default, PODModes retains 99% of the energy. This can be changed with the optional argument tolerance.","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"modes = PODModes(X);\nnothing #hide","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"The a array is of size N_t times r, where N_t is the number of time values, and r is the number of modes. The modes are ordered from highest energy to lowest energy.","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"modes.a","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"In this case, 7 modes were retained, at 51 times.","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"If we wanted to re-assemble the modes and coefficients to recover the flow at some time instant, we could use the mapreduce function, e.g.,","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"vel_assemble = mapreduce((aj, phi_j) -> aj .* phi_j, +, modes.a[end,:], modes.phi) + modes.Xmean","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"In this last line, modes.a[end,:] obtains the expansion coefficients at the last time available.","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"Let's print the first mode, and the corresponding history of the modal coefficient in the decomposition","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"plot(layout=[2;1],plot(modes.phi[1].u,sys,title=\"u\"),\n   plot(modes.phi[1].v,sys,title=\"v\"),\n   plot(tpod,modes.a[:,1],xlim=(0,Inf),xlabel=\"\\$t\\$\",ylabel=\"\\$a_1(t)\\$\"))","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"The energy associated with this mode is","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"modes.lambda[1]","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"Now let's print the rth mode, and the history of the coefficient in the decomposition","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"plot(layout=[2;1],plot(modes.phi[end].u,sys,title=\"u\"),\n   plot(modes.phi[end].v,sys,title=\"v\"),\n   plot(tpod,modes.a[:,end],xlim=(0,Inf),xlabel=\"\\$t\\$\",ylabel=\"\\$a_r(t)\\$\"))","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"The energy associated with this mode is","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"modes.lambda[end]","category":"page"},{"location":"manual/pod/#POD-functions","page":"Proper orthogonal decomposition (POD)","title":"POD functions","text":"","category":"section"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"PODModes","category":"page"},{"location":"manual/pod/#ILMPostProcessing.PODModes","page":"Proper orthogonal decomposition (POD)","title":"ILMPostProcessing.PODModes","text":"PODModes(X::Vector{T}[; tolerance=0.99])\n\nCalculate the POD modes and associated time-varying coefficients from an array of snapshot data X. This X plays the role of a snapshot matrix, whose columns are snapshots of the data. However, it is actually to be stored as a type Vector{T} where T<:GridData. It can be generated with a function like velocity(sol,sys,trange), where sol is a ODESolution, sys is an ILMSystem, and trange is an array of times, e.g., trange=range(1,10,length=100). The number of POD modes retained in the decomposition is set by tolerance: this specifies the fraction of the total energy to keep, and defaults to 99 percent. \n\nThe output of PODModes is a structure with the following fields\n\nXmean: temporal mean of the data. type T\nXnorm: original X vector with mean removed. Each element is of type T\nphi: vector of POD modes. Each element is of type T\na: matrix of POD coefficients. Number of columns is same as number of entries in phi. Column k constitutes the time-varying coefficient for mode k in phi.\nlambda: vector of modal energies, arranged in decreasing order, corresponding to the modes in phi\n\n\n\n\n\n","category":"type"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"","category":"page"},{"location":"manual/pod/","page":"Proper orthogonal decomposition (POD)","title":"Proper orthogonal decomposition (POD)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#ILMPostProcessing.jl","page":"Home","title":"ILMPostProcessing.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tools for post-processing solutions of immersed layer PDEs","category":"page"},{"location":"","page":"Home","title":"Home","text":"The objective of this package is to supply a variety of post-processing tools for solutions of PDEs carried out with the ImmersedLayers.jl package, and the domain-specific subpackages, such as ViscousFlow.jl. The post-processing tools[1] currently available are","category":"page"},{"location":"","page":"Home","title":"Home","text":"Proper orthogonal decomposition (POD)\nDynamic mode decomposition (DMD) – soon","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package works on Julia 1.7 and above and is registered in the general Julia registry. To install from the REPL, type e.g.,","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add ILMPostProcessing","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, in any version, type","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using ILMPostProcessing","category":"page"},{"location":"","page":"Home","title":"Home","text":"The plots in this documentation are generated using Plots.jl. You might want to install that, too, to follow the examples.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[1]: Taira, K. et al (2017) \"Modal Analysis of Fluid Flows: An Overview,\" AIAA Journal, 55(12), 4013–4041.","category":"page"}]
}
